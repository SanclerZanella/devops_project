pipeline {
    agent any

    parameters {
        choice(name: 'TEST_MODE', choices: '1\n2\n3', description: 'Select the test mode')
    }

    environment {
        EMAIL_SUBJECT = 'Pipeline Status: '
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '5'))
    }

    stages {
        stage('checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/SanclerZanella/git_class.git']]])
                }
            }
        }
        stage('run backend server') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start/min python rest_app.py'
                    } else {
                        sh 'nohup python rest_app.py &'
                    }
                }
            }
        }
        stage('run frontend server') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start/min python web_app.py'
                    } else {
                        sh 'nohup python web_app.py &'
                    }
                }
            }
        }
        stage('run tests') {
            steps {
                script {
                    def testMode = params.TEST_MODE.toInteger()

                    switch (testMode) {
                        case 1:
                            if (checkOs() == 'Windows') {
                                bat 'start/min python frontend_testing.py'
                            } else {
                                sh 'nohup python frontend_testing.py &'
                            }
                            break
                        case 2:
                            if (checkOs() == 'Windows') {
                                bat 'start/min python backend_testing.py'
                            } else {
                                sh 'nohup python backend_testing.py &'
                            }
                            break
                        case 3:
                            if (checkOs() == 'Windows') {
                                bat 'start/min python combined_testing.py'
                            } else {
                                sh 'nohup python combined_testing.py &'
                            }
                            break
                        default:
                            error "Invalid test mode selected"
                    }
                }
            }
        }

        stage('clear environment') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start/min python clean_environment.py'
                    } else {
                        sh 'nohup python clean_environment.py &'
                    }
                }
            }
        }
    }

    post {
        success {
            emailext (
                to: 'sanclerzjj@gmail.com',
                subject: "${EMAIL_SUBJECT}Successful",
                body: 'The Jenkins pipeline completed successfully.',
                mimeType: 'text/plain',
                replyTo: 'sanclerzjj@gmail.com',
                attachLog: true,
                compressLog: true,
                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                presendScript: 'import jenkins.plugins.mailer.tasks.MimeMessageBuilder\n\nmsg.setContent(msg.getContent(), "text/html")',
                from: 'sanclerzjj@gmail.com'
            )
        }
        failure {
            emailext (
                to: 'sanclerzjj@gmail.com',
                subject: "${EMAIL_SUBJECT}Failed",
                body: 'Please check the Jenkins build status.',
                mimeType: 'text/plain',
                replyTo: 'sanclerzjj@gmail.com',
                attachLog: true,
                compressLog: true,
                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                presendScript: 'import jenkins.plugins.mailer.tasks.MimeMessageBuilder\n\nmsg.setContent(msg.getContent(), "text/html")',
                from: 'sanclerzjj@gmail.com'
            )
        }
    }
}

def checkOs(){
    if (isUnix()) {
        def uname = sh script: 'uname', returnStdout: true
        if (uname.startsWith("Darwin")) {
            return "Macos"
        }
        else {
            return "Linux"
        }
    }
    else {
        return "Windows"
    }
}
